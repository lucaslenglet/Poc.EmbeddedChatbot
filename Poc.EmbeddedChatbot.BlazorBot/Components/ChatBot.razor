@inject IJSRuntime JS
@inject PerplexityAiService aiService
@inject IMemoryCache cache
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="chatbot">
    <div class="chatbot__header">
        <h1>BlazorBot</h1>
    </div>

    <div class="chatbot__chat">
        @foreach (var message in Messages)
    {
        if (message is BotMessageType)
        {
            <div class="chatbot__chat__message">
                    <span class="chatbot__chat__message__name">BlazorBot</span>
                    <span class="bot__message__content">@message.Value</span>
                </div>
        }
        else if (message is UserMessageType)
        {
            <div class="chatbot__chat__message">
                    <span class="chatbot__chat__message__name">User</span>
                    <span class="user__message__content">@message.Value</span>
                </div>
        }
    }

        @if (IsBotTyping)
    {
        <div class="chatbot__chat__message">
                <span class="chatbot__chat__message__name">BlazorBot</span>
                <div class="botTyping">
                    <div class="bounce1"></div>
                    <div class="bounce2"></div>
                    <div class="bounce3"></div>
                </div>
            </div>
    }
    </div>

    <div class="chatbot__inputs">
        <textarea
            placeholder="Ecrire un messagge..."
            @bind="Text">
        </textarea>
        <input type="button" @onclick="OnClick" value="Envoyer" />
    </div>
</div>

<script>
    window.scrollToBottomOfChat = () => {
        const terminalResultsDiv = document.getElementsByClassName("chatbot__chat")[0];
        terminalResultsDiv.scrollTop = terminalResultsDiv.scrollHeight;
    }
</script>

@code {
private string? Text;
private bool IsBotTyping = false;
private List<ChatMessageType> Messages = [];

[Parameter]
public string? ConversationKey { get; set; }

protected override void OnParametersSet()
{
    if (string.IsNullOrWhiteSpace(ConversationKey))
    {
        return;
    }

    if (cache.TryGetValue<List<ChatMessageType>>($"chatbot-{ConversationKey}", out var messages))
    {
        Messages = messages!;
    }
}

private async Task OnClick()
{
    IsBotTyping = true;

    if (string.IsNullOrWhiteSpace(Text))
    {
        IsBotTyping = false;
        return;
    }

    Messages.Add(new UserMessageType(Text));

    // await Task.Delay(TimeSpan.FromMilliseconds(Random.Shared.Next(30)) * 100);

    // var reponse = new Bogus.Faker().Lorem.Paragraph(Random.Shared.Next(10));

    var prompts = Messages.Select(m => new Prompt
    {
        Role = m is BotMessageType ? EPromptRole.Assistant : EPromptRole.User,
        Content = m.Value,
    });

    var reponse = await aiService.AskAsync(prompts)!;

    Messages.Add(new BotMessageType(reponse));

    if (!string.IsNullOrWhiteSpace(ConversationKey))
    {
        cache.Set($"chatbot-{ConversationKey}", Messages);
    }

    await JS.InvokeVoidAsync("scrollToBottomOfChat");

    Text = string.Empty;
    IsBotTyping = false;
}
}