@page "/"
@inject IJSRuntime JS
@inject PerplexityAiService aiService
@inject IMemoryCache cache
@attribute [StreamRendering]

<div class="chatbot">
    <div class="chatbot__header">
        <h1>BlazorBot (@ConversationKey)</h1>
    </div>

    <div class="chatbot__chat">
        @foreach (var message in Messages)
        {
            if (message is BotMessageType)
            {
                <div class="chatbot__chat__message">
                    <span class="chatbot__chat__message__name">BlazorBot</span>
                    <span class="bot__message__content">@message.Value</span>
                </div>
            }
            else if (message is UserMessageType)
            {
                <div class="chatbot__chat__message">
                    <span class="chatbot__chat__message__name">@UserName</span>
                    <span class="user__message__content">@message.Value</span>
                </div>
            }
        }

        @if (IsBotTyping)
        {
            <div class="chatbot__chat__message">
                <span class="chatbot__chat__message__name">BlazorBot</span>
                <div class="botTyping">
                    <div class="bounce1"></div>
                    <div class="bounce2"></div>
                    <div class="bounce3"></div>
                </div>
            </div>
        }
    </div>

    <EditForm Model="Model" FormName="ChatInputs" OnSubmit=OnSubmit Enhance>
        <div class="chatbot__inputs">
            <div>
                <InputTextArea placeholder="Ecrire un message..." @bind-Value=Model!.Text style="width: -webkit-fill-available;height: -webkit-fill-available;"></InputTextArea>
            </div>
            <input type="submit" value="Envoyer" disabled=@IsBotTyping />
            <input type="button" value="Recommencer" disabled=@(Messages.Count == 0) />
        </div>
    </EditForm>
</div>

<script>
    (function () {
        const terminalResultsDiv = document.getElementsByClassName("chatbot__chat")[0];
        terminalResultsDiv.scrollTop = terminalResultsDiv.scrollHeight;
    })();
</script>

 @code {
    private bool IsBotTyping = false;
    private List<ChatMessageType> Messages = [];
    private string CacheKey => $"chatbot-ck-{ConversationKey!}";

    [SupplyParameterFromForm]
    public ChatBotViewModel? Model { get; set; }

    [SupplyParameterFromQuery(Name = "convkey")]
    public string? ConversationKey { get; set; }

    [SupplyParameterFromQuery(Name = "username")]
    public string? UserName { get; set; }

    private async Task OnSubmit()
    {
        if (string.IsNullOrWhiteSpace(Model!.Text))
        {
            return;
        }

        Messages.Add(new UserMessageType(Model!.Text));

        IsBotTyping = true;
        Model!.Text = string.Empty;

        var prompts = Messages
            .Select(m => new Prompt
                {
                    Role = m is BotMessageType ? EPromptRole.Assistant : EPromptRole.User,
                    Content = m.Value,
                });

        await Task.Delay(2000);
        var reponse = await aiService.AskAsync(prompts)!;

        IsBotTyping = false;

        Messages.Add(new BotMessageType(reponse));

        cache.Set(CacheKey, Messages);
    }

    protected override void OnInitialized()
    {
        Model ??= new();

        UserName = string.IsNullOrWhiteSpace(UserName) ? "User" : UserName;
        ConversationKey = string.IsNullOrWhiteSpace(ConversationKey) ? "default" : ConversationKey;

        if (cache.TryGetValue<List<ChatMessageType>>(CacheKey, out var messages))
        {
            Messages = messages!;
        }
    }
}